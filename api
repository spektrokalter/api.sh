#!/bin/bash

set -o errexit -o nounset -o pipefail

die() {
	printf '%s\n' "$*" >&2
	exit 1
}

#
# configuration
#

CURL=(/usr/bin/curl)

if [[ -v APIRC ]]; then
	[[ -f "$APIRC" && -r "$APIRC" ]] || die "bad APIRC: $APIRC"
	source -- "$APIRC"
elif [[ -f ~/.apirc && -r ~/.apirc ]]; then
	source -- ~/.apirc
fi

#
# command-line arguments
#

if (( $# < 2 )); then
	die 'invalid usage'
fi

METHOD="$1"
REQUEST_DIR="$2"

#
# validation
#

request_path="$REQUEST_DIR/path"
request_headers="$REQUEST_DIR/headers"
request_json="$REQUEST_DIR/json"
request_body="$REQUEST_DIR/body"
request_query="$REQUEST_DIR/query"

[[ -d "$REQUEST_DIR" && -x "$REQUEST_DIR" ]] || die "bad REQUEST_DIR: $REQUEST_DIR"
[[ -f "$request_path" && -r "$request_path" ]] || die "bad request path: $request_path"

[[
	-e "$request_json" &&
	-e "$request_body"
]] && die "'json' and 'body' cannot coexist in the same request"

#
# build curl command and run it
#

curl_cmd=("${CURL[@]}" -X "$METHOD")

cleanup_files=()
trap 'rm -- "${cleanup_files[@]}"' EXIT

if [[ -f "$request_headers" && -r "$request_headers" ]]; then
	temp="$(mktemp)"
	cleanup_files+=("$temp")

	envsubst <"$request_headers" >"$temp"
	curl_cmd+=(-H "@$temp")

	unset temp
fi

if [[ -f "$request_json" && -r "$request_json" ]]; then
	temp="$(mktemp)"
	cleanup_files+=("$temp")

	envsubst <"$request_json" >"$temp"
	curl_cmd+=(--json "@$temp")

	unset temp
fi

if [[ -f "$request_body" && -r "$request_body" ]]; then
	temp="$(mktemp)"
	cleanup_files+=("$temp")

	envsubst <"$request_body" >"$temp"
	curl_cmd+=(-d "@$temp")

	unset temp
fi

url="$(envsubst <"$request_path")"
if [[ -f "$request_query" && -r "$request_query" ]]; then
	url+="?$(envsubst <"$request_query")"
fi

"${curl_cmd[@]}" -- "$url"
